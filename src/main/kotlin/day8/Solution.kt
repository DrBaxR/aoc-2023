package day8

fun part1(text: String): Long {
    val lines = text.lines()
    val directions = lines[0]
    val nodes = lines.subList(2, lines.size - 1).map { Node(it) }

    return Graph(nodes).traverse("AAA", directions).toLong()
}

fun part2(text: String) {
    val lines = text.lines()
    val directions = lines[0]
    val nodes = lines.subList(2, lines.size - 1).map { Node(it) }
    val graph = Graph(nodes)

    val steps = mutableListOf(
        graph.traverse("NBA", directions).toLong(),
        graph.traverse("SXA", directions).toLong(),
        graph.traverse("JVA", directions).toLong(),
        graph.traverse("XVA", directions).toLong(),
        graph.traverse("AAA", directions).toLong(),
        graph.traverse("GRA", directions).toLong(),
    )

    println(lcm(steps))
}

// functions below generated by copilot because I couldn't be bothered to write them myself
// function takes in a list of long numbers and returns the LCM of the numbers in the list
fun lcm(numbers: List<Long>): Long {
    var lcm = numbers[0]
    for (i in 1 until numbers.size) {
        lcm = lcm(lcm, numbers[i])
    }
    return lcm
}

// function takes in two long numbers and returns the LCM of the numbers
fun lcm(a: Long, b: Long): Long {
    return a * (b / gcd(a, b))
}

// function takes in two long numbers and returns the GCD of the numbers
fun gcd(a: Long, b: Long): Long {
    if (b == 0L) return a
    return gcd(b, a % b)
}

